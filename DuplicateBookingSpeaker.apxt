trigger DuplicateBookingSpeaker on EventSpeakers__c (before insert, before update) {
    List<EventSpeakers__c> existingESObj = new List<EventSpeakers__c>();
    // Get eventSpeaker object with event & speaker object
    //Map<String,String> eventSpeaker = new Map<String,String>();
    List<ID> listEvents = new List<ID>();
    List<ID> listSpeakers = new List<ID>();
	for(EventSpeakers__c es: Trigger.New){
        listEvents.add(es.event__c);
        listSpeakers.add(es.speaker__c);
    }
    
    // Get that event startDate & endDate then get all events with same date
    for(Integer i=0; i<listEvents.size(); i++){
        Event__c event = [select ID, Start_DateTime__c, End_DateTime__c from Event__c
                          where ID = :listEvents[i]];
        Datetime eventSD = event.Start_DateTime__c;
        Datetime eventED = event.End_DateTime__c;
        // Get events with same date
        List<Event__c> sameDateEvents = [select ID, Start_DateTime__c, End_DateTime__c from event__c 
                                         where Start_DateTime__c >= :eventSD AND Start_DateTime__c <= :eventED];
        // Check if that speaker is booked in one of those events ?
        for(Event__c sdEvents: sameDateEvents){
            // Get EventSpeakers object related to the event with the same speaker booking
         	List<EventSpeakers__c> esObj = [select ID, Event__c, Speaker__c from EventSpeakers__c
                                            where Speaker__c = :listSpeakers[i]];
            if(esObj.size()>0) existingESObj.addAll(esObj);
        }
    }
   
    // if "yes" block process
    for(EventSpeakers__c esTrigger: Trigger.New){
        for(EventSpeakers__c objExist: existingESObj){
            if(objExist.Speaker__c == esTrigger.Speaker__c){
            	System.debug('This speaker is already booked at this Date for another event!');
        		esTrigger.addError('This speaker is already booked at this Date for another event!'); 
            } else {
                System.debug('Success ! - esTrigger = '+esTrigger+' - '+existingESObj);
            }
        }
    }
    
}